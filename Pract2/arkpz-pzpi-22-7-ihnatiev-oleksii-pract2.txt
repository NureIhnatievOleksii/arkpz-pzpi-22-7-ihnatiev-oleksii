МIНIСТЕРСТВО ОСВIТИ І НАУКИ УКРАЇНИ

ХАРКIВСЬКИЙ НАЦІОНАЛЬНИЙ
УНIВЕРСИТЕТ РАДIОЕЛЕКТРОНIКИ




Кафедра «Програмна інженерія»



Звіт
з практичної роботи №2
з дисципліни  «Аналіз та рефакторінг коду»
на тему «Методи рефакторингу коду програмного забезпечення»


Виконав: 							Прийняв:
ст. гр. ПЗПІ-22-7                       			ст. викладач кафедри ПІ        Ігнатьєв Олексій Геннадійович			Сокорчук Ігор Петрович





Харкiв 2024

1 МЕТА
Навчитися ідентифікувати проблеми в коді та використовувати відповідні
методи рефакторингу для покращення його якості.
2 ЗАВДАННЯ
Cтудент повинен обрати три методи рефакторингу коду із книги Мартіна
Фаулера «Refactoring. Improving the Design of Existing Code». Навести приклади
свого особистого коду (з курсових, лабораторних або інших проєктів), який
потребує покращення, та продемонструвати застосування обраних методів.

3 ХІД РОБОТИ
Вся робота була виконана та показана на слайдах презентації. Вона містить
всі обрані методи, приклади рефакторингу коду та висновки, які наведені у Додатку
А.

Обрана мова програмування: C++
У презентації наведено опис трьох основних методів рефакторингу коду:

Метод 1 — Introduce Parameter Object
Проблема:
•	Велика кількість параметрів у методі, що ускладнює розуміння та модифікацію коду.
Рішення:
•	Створення об'єкта для групування параметрів, що полегшує читабельність і підтримку коду.
Приклад до рефакторингу:
void calculate(int length, int width, int height, int depth, bool isRectangular, bool hasHoles) {
    int volume = length * width * height;
    if (isRectangular) {
        volume *= depth;
    }
    if (hasHoles) {
        volume -= 50; // Знижуємо об'єм на площу отворів
    }
    // Інша логіка
}
Приклад після рефакторингу:
struct Dimensions {
    int length, width, height, depth;
    bool isRectangular, hasHoles;
};

void calculate(const Dimensions& dims) {
    int volume = dims.length * dims.width * dims.height;
    if (dims.isRectangular) {
        volume *= dims.depth;
    }
    if (dims.hasHoles) {
        volume -= 50; // Знижуємо об'єм на площу отворів
    }
    // Інша логіка
}
Переваги:
•	Покращена читабельність.
•	Легше масштабувати код без зміни підпису методу.
•	Створений об'єкт можна використовувати у різних частинах коду.
Метод 2 — Preserve Whole Object
Проблема:
•	Передача окремих полів об'єкта замість цілого об'єкта.
Рішення:
•	Передача об'єкта в цілому замість окремих полів для покращення синхронізації даних.
Приклад до рефакторингу:
void display(int x, int y, int width, int height) {
    std::cout << "Coordinates: " << x << ", " << y << ", Dimensions: " << width << "x" << height << std::endl;
}
Приклад після рефакторингу:
struct Rectangle {
    int x, y, width, height;
};
void display(const Rectangle& rect) {
    std::cout << "Coordinates: " << rect.x << ", " << rect.y << ", Dimensions: " << rect.width << "x" << rect.height << std::endl;
}


Переваги:
•	Знижує кількість параметрів у методі.
•	Покращує підтримку зв'язків між полями та методами.

Метод 3 — Replace Conditional with Polymorphism
Проблема:
•	Використання складних умовних операторів для визначення поведінки об'єктів різних типів.
Рішення:
•	Заміна умовних операторів на поліморфізм для покращення гнучкості і зменшення складності коду.
Приклад до рефакторингу:
if (shapeType == "circle") {
    // Логіка для кола
} else if (shapeType == "rectangle") {
    // Логіка для прямокутника
}
Приклад після рефакторингу:
class Shape {
public:
    virtual void draw() = 0;
};

class Circle : public Shape {
public:
    void draw() override {
        // Логіка для малювання кола
    }
};

class Rectangle : public Shape {
public:
    void draw() override {
        // Логіка для малювання прямокутника
    }
};

void display(Shape* shape) {
    shape->draw();
}
Переваги:
•	Спрощує підтримку нових типів об'єктів.
•	Зменшує кількість умовних операторів в коді.

ВИСНОВКИ

У результаті роботи було вивчено три методи рефакторингу коду, які допомагають покращити читабельність, масштабованість і підтримку програмного забезпечення.
Посилання на youtube: https://youtu.be/wBmPNB4Vr-o?si=U5eDaggUQIJGAlAs
