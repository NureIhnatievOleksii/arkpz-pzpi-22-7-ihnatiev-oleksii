1) Рекомендація: Використовуйте зрозумілі коментарі для пояснення коду.
Опис: Коментарі покращують розуміння коду іншими розробниками та самим автором у майбутньому. 
  Приклад:

1 // Це однорядковий коментар
2 /*
3    Це багаторядковий
4    коментар
5 */

---

2) Рекомендація: Оголошуйте змінні з чіткими назвами та типами.
Опис: Використання осмислених назв змінних підвищує читабельність та зменшує можливість помилок. 
  Приклад:

1 int age = 25;           // Ціла змінна
2 double height = 1.75;   // Змінна з плаваючою крапкою
3 char initial = 'A';     // Символьна змінна

---

3) Рекомендація: Використовуйте масиви для зберігання колекцій даних.
Опис: Масиви забезпечують ефективне управління множиною значень одного типу. 
  Приклад:

1 int numbers[5] = {1, 2, 3, 4, 5}; // Масив з 5 елементів

---

4) Рекомендація: Використовуйте оператор std::cout для виводу інформації.
Опис: Оператор std::cout забезпечує зручний спосіб виводу даних на екран. 
  Приклад:

1 #include <iostream>
2 int main() {
3    std::cout << "Hello, C++!" << std::endl;
4    return 0;
5 }

---

5) Рекомендація: Використовуйте логічні оператори для умовного керування програмою.
Опис: Логічні оператори дозволяють виконувати дії залежно від результатів перевірок умов.
  Приклад:

| Оператор | Опис          |
|----------|---------------|
| &&       | Логічне "І"   |
| ||       | Логічне "АБО" |
| !        | Логічне "НІ"  |

---

6) Рекомендація: Використовуйте умовні оператори для прийняття рішень.
Опис: Умовні оператори забезпечують виконання різних блоків коду залежно від умов.
  Приклад:

1 int age = 18;
2 if (age >= 18) {
3    std::cout << "Дорослий" << std::endl;
4 } else {
5    std::cout << "Дитина" << std::endl;
6 }

---

7) Рекомендація: Використовуйте цикли для автоматизації повторюваних задач.
Опис: Цикли зменшують кількість коду та дозволяють виконувати блоки багаторазово.
  Приклад:

1 // Цикл for
2 for (int i = 0; i < 5; i++) {
3    std::cout << i << " ";
4 }

5 // Цикл while
6 int j = 0;
7 while (j < 5) {
8    std::cout << j << " ";
9    j++;
10 }

---

8) Рекомендація: Застосовуйте об'єктно-орієнтований підхід для створення гнучких програм.
Опис: Використання класів та об'єктів підвищує масштабованість та зручність роботи з кодом.
  Приклад:

1 class Car {
2 public:
3    std::string brand;
4    int year;
5    void drive() {
6       std::cout << "The car is driving!" << std::endl;
7    }
8 };
9 
10 int main() {
11    Car myCar; // Створюємо об'єкт myCar класу Car
12    myCar.brand = "Toyota";
13    myCar.year = 2020;
14    myCar.drive(); // Викликаємо метод об'єкту
15    return 0;
16 }
